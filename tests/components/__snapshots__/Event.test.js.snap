// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Event/> should render Event correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Event
    event={
      Object {
        "anonymousId": "e1dbd770-1a96-48da-8bb9-2a294a11a571",
        "context": Object {
          "ip": "149.109.19.117",
          "library": Object {
            "name": "analytics.js",
            "version": "3.0.0",
          },
        },
        "event": "Notification Shown",
        "integrations": Object {},
        "messageId": "ajs-ac65f2dc-a7ba-496c-be3a-74a0de177c7f",
        "receivedAt": "2018-09-18T20:01:40.790Z",
        "sentAt": 1537300895790,
        "type": "track",
        "userId": "6a8e7fe9-09e8-480b-bf12-27c052035ebf",
      }
    }
    handleEventSelected={[MockFunction]}
    isSelected={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Unknown />,
        <div
          className="eventType"
        >
          track
        </div>,
        <div
          className="eventName"
        >
          <div
            className="eventNameText"
          >
            Notification Shown
          </div>
        </div>,
        <div
          className="eventTimeStamp"
        >
          2018/09/18 13:01:40
        </div>,
      ],
      "className": "eventItem",
      "data-is-selected": false,
      "onClick": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "track",
          "className": "eventType",
        },
        "ref": null,
        "rendered": "track",
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="eventNameText"
          >
            Notification Shown
          </div>,
          "className": "eventName",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Notification Shown",
            "className": "eventNameText",
          },
          "ref": null,
          "rendered": "Notification Shown",
          "type": "div",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "2018/09/18 13:01:40",
          "className": "eventTimeStamp",
        },
        "ref": null,
        "rendered": "2018/09/18 13:01:40",
        "type": "div",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Unknown />,
          <div
            className="eventType"
          >
            track
          </div>,
          <div
            className="eventName"
          >
            <div
              className="eventNameText"
            >
              Notification Shown
            </div>
          </div>,
          <div
            className="eventTimeStamp"
          >
            2018/09/18 13:01:40
          </div>,
        ],
        "className": "eventItem",
        "data-is-selected": false,
        "onClick": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "track",
            "className": "eventType",
          },
          "ref": null,
          "rendered": "track",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="eventNameText"
            >
              Notification Shown
            </div>,
            "className": "eventName",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Notification Shown",
              "className": "eventNameText",
            },
            "ref": null,
            "rendered": "Notification Shown",
            "type": "div",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "2018/09/18 13:01:40",
            "className": "eventTimeStamp",
          },
          "ref": null,
          "rendered": "2018/09/18 13:01:40",
          "type": "div",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
